#include <assert.h>
#include <iostream>
#include <sstream>
#include <algorithm>


struct container
{
    unsigned int size() const {return length;};
    int front() const {return value[0];};
    int back() const{return value[length-1];};
    int norm() const
    {
        int sum = 0;
        for(unsigned int i = 0; i < length; i++)
            sum = sum + value[i];
        return sum;
    };
    friend bool operator==(const container &lhs, const container &rhs)
    {
        for(size_t i=0; i < lhs.length; i++)

           return lhs[i]==rhs[i];
        return true;

    };
    friend bool operator!=(const container &lhs, const container &rhs)
    {
        for(size_t i=0; i < lhs.length; i++)

           return !(lhs[i]==rhs[i]);

    };
    friend bool operator<(const container &lhs, const container &rhs)
    {
        return lhs.norm()<rhs.norm();
    };
    friend bool operator>(const container &lhs, const container &rhs)
    {
        return lhs.norm()>rhs.norm();
    };
    friend bool operator<=(const container &lhs, const container &rhs)
    {
        return !(lhs.norm()>rhs.norm());
    };
    friend bool operator>=(const container &lhs, const container &rhs)
    {
        return !(rhs.norm()<lhs.norm());
    };
    friend std::ostream &operator<<(std::ostream &os, const container &object)
    {
        for(size_t i=0; i < object.length; i++)
        {
        os<<object.value[i]<<" ";
        }
        return os;
    };
    friend std::istream &operator>>(std::istream &is, container &object)
    {
        for(size_t i=0; i < object.length; i++)
        {
        is>>object.value[i];
        }
        return is;
    };
    void insert(const unsigned int idx, const int x)
    {
       length = length+1;
       int* temp = new int[length];
       for(int i=0, shift=0;i<length+1;i++)
       {
         temp[i]=value[i-shift];
         temp[idx]=x;
         shift=1;
       }
        delete[] value;
        value = temp;
        temp = nullptr;
    };
    void append(const int x)
    {
        value[length]=x;
        ++length;
    };
    void extend(const container &other){
        int * array = new int [length+other.length];
        unsigned int i=0;
          for(; i<length; i++)
          {
            array[i]=value[i];
          }

          for(unsigned int j=0; i<length+other.length; i++)
          {
            array[i]=other.value[j];
            j++;
          }
          length+=other.length;
          delete [] value;
          value = array;
    };
    int pop(const unsigned int idx)
    {
        int *tmp = new int [length - 1];
        for (unsigned short i = 0; i < idx; ++i) tmp[i] = value[i];
        for (unsigned short i = idx; i < length - 1; ++i) tmp[i] = value[i+1];
        delete [] value;
        value = tmp;
        --length;
        return tmp[length];
     };
    void remove(const int x)
    {
        assert(length > 0);
        unsigned int i=0;

      int *tmp = new int [length - 1];
      for (unsigned short i = 0; i < length; ++i) tmp[i] = value[i];
      for (unsigned short i = 0; i < length - 1; ++i) tmp[i] = value[i+1];
      delete [] value;
      value = tmp;
      --length;
      
    };
    unsigned int index(const int x) const
    {
        for(unsigned int i=0; i<length; i++)
        {
            if (value[i] == x) return i;
        }
        return -1;
    };
    unsigned int count(const int x) const
    {
        unsigned int c=std::count (value, value+length, x);
        return c;
    };

    int &operator[](const unsigned int idx)
    {
        if(idx<0)
        {
        return (-idx > length) ? value[0] : value[length + idx];
        }
        if(idx >= length)
            return value[length-1];
        return value[idx];
    };
    const int operator[](const unsigned int idx) const
    {
        if(idx<0)
        {
        return (-idx > length) ? value[0] : value[length + idx];
        }
        if(idx >= length)
            return value[length-1];
        return value[idx];
    };
    container &operator=(const container &other)
    {
        if (this == &other) return *this;
        delete [] value;
        value = new int [other.length];
        for(size_t i=0; i < other.length; i++)
        {
            value[i]=other.value[i];
        }
        length=other.length;
        return *this;
    };


    container(){}
    container(const container &other): length(other.length), value(new int[other.length])
    {
        if (other.length <= 0) return;
        for(unsigned int i=0; i<other.length; i++)
        {
            value[i] = other.value[i];
        }
    }
    container(const unsigned int n)
    {
        length = n;
        value = new int [n];
    }

    container(const int *x, const unsigned int n):length(n),value(new int[n])
    {
                std::copy(x, x+n, value);
    }
    ~container()
    {
        delete[] value;
    }
private:
    int *value{nullptr};
    unsigned int length{0};
};

int main(int argc, char const *argv[])
{
    std::stringstream ss{"1 3 5 7 9"};

    container a(5);
    ss >> a;
    assert(5 == a.size());
    assert(1 == a[0]);
    assert(9 == a[4]);

    container b{a};
    assert(a == b);
    assert(3 == b[1]);
    assert(7 == b[3]);

    b[4] = 0;
    assert(0 == b[10]);
    assert(b < a);

    container c;
    c = b;
    assert(b == c);
    assert(1 == c[0]);
    assert(0 == c[-1]);

    std::cout << c;
}
